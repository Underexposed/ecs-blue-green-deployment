Description: >
  Create Application Load Balancer resources for Blue/Green Deployment on ECS. For further reference, please review BluegreenRepo ==> https://github.com/awslabs/ecs-blue-green-deployment

Parameters:
  VpcId:
    Type: String

  VpcCIDR:
    Type: String

  Subnet1:
    Type: AWS::EC2::Subnet::Id

  Subnet2:
    Type: AWS::EC2::Subnet::Id

  Name:
    Type: String

Resources:
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Core Load Balancer Security Group"
      GroupName: "core-elb-security-group"
      Tags: 
        - 
          Key: "Project"
          Value: "ArtsThread"
        - 
          Key: "createdBy"
          Value: "Dan & Sam"
        - 
          Key: "Environment"
          Value: "development"
        - 
          Key: "Name"
          Value: "core-elb-security-group"
      VpcId: !Ref VpcId
      SecurityGroupIngress: 
        - 
          CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
        # Change below CidrIp to !Ref VpcCIDR, if you want to restrict the beta version of the traffic to VPC CIDRs only
        - 
          CidrIp: "0.0.0.0/0"
          FromPort: 8080
          IpProtocol: "tcp"
          ToPort: 8080
        - 
          CidrIp: "0.0.0.0/0"
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443

  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: "ArtsThread-Load-Balancer"
      Scheme: "internet-facing"
      Type: "application"
      Subnets: 
        - !Ref Subnet1
        - !Ref Subnet1
      SecurityGroups: 
        - !Ref SecurityGroup
      IpAddressType: "ipv4"
      LoadBalancerAttributes: 
        - 
          Key: "access_logs.s3.enabled"
          Value: "false"
        - 
          Key: "idle_timeout.timeout_seconds"
          Value: "60"
        - 
          Key: "deletion_protection.enabled"
          Value: "false"
        - 
          Key: "routing.http2.enabled"
          Value: "true"
        - 
          Key: "routing.http.drop_invalid_header_fields.enabled"
          Value: "false"

  HTTPSListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: "HTTPS"
      SslPolicy: "ELBSecurityPolicy-2016-08"
      Certificates: 
        - 
          CertificateArn: arn:aws:acm:eu-west-1:738308653220:certificate/4a2de45a-2c6b-4dfd-95b0-cea3bdc26ad8
          
      DefaultActions: 
        - 
          Order: 1
          TargetGroupArn: !Ref Test1TargetGroup
          Type: "forward"

  HTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions: 
        - 
          Order: 1
          RedirectConfig: 
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
          Type: "redirect"            

  Test1TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      Port: 80
      Protocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: "instance"
      Matcher: 
        HttpCode: "200"
      HealthyThresholdCount: 5
      VpcId: !Ref VpcId
      Name: "target-group-1"
      HealthCheckEnabled: true
      TargetGroupAttributes: 
        - 
          Key: "stickiness.enabled"
          Value: "false"
        - 
          Key: "deregistration_delay.timeout_seconds"
          Value: "300"
        - 
          Key: "stickiness.type"
          Value: "lb_cookie"
        - 
          Key: "stickiness.lb_cookie.duration_seconds"
          Value: "86400"
        - 
          Key: "slow_start.duration_seconds"
          Value: "0"
        - 
          Key: "load_balancing.algorithm.type"
          Value: "round_robin"

  Test2TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      Port: 80
      Protocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: "instance"
      Matcher: 
        HttpCode: "200"
      HealthyThresholdCount: 5
      VpcId: !Ref VpcId
      Name: "target-group-2"
      HealthCheckEnabled: true
      TargetGroupAttributes: 
        - 
          Key: "stickiness.enabled"
          Value: "false"
        - 
          Key: "deregistration_delay.timeout_seconds"
          Value: "300"
        - 
          Key: "stickiness.type"
          Value: "lb_cookie"
        - 
          Key: "stickiness.lb_cookie.duration_seconds"
          Value: "86400"
        - 
          Key: "slow_start.duration_seconds"
          Value: "0"
        - 
          Key: "load_balancing.algorithm.type"
          Value: "round_robin"
              
  TestListenerRule1:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Priority: "1"
      ListenerArn: !Ref HTTPSListener
      Conditions: 
        - 
          Field: "host-header"
          Values: 
            - "dev.artsthread.dev"
      Actions: 
        - 
          Type: "forward"
          TargetGroupArn: !Ref Test1TargetGroup
          Order: 1
          ForwardConfig: 
            TargetGroups: 
              - 
                TargetGroupArn: !Ref Test1TargetGroup
                Weight: 1
            TargetGroupStickinessConfig: 
              Enabled: false

  TestListenerRule2:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Priority: "2"
      ListenerArn: !Ref HTTPSListener
      Conditions: 
        - 
          Field: "host-header"
          Values: 
            - "dev2.artsthread.dev"
      Actions: 
        - 
          Type: "forward"
          TargetGroupArn: !Ref Test2TargetGroup
          Order: 1
          ForwardConfig: 
            TargetGroups: 
              - 
                TargetGroupArn: !Ref Test2TargetGroup
                Weight: 1
            TargetGroupStickinessConfig: 
                Enabled: false
        
Outputs:
  ServiceUrl:
    Description: URL of the load balancer for the sample service.
    Value: !Sub http://${LoadBalancer.DNSName}

  SecurityGroup:
    Value: !Ref SecurityGroup

  LoadBalancerArn:
    Value: !Ref LoadBalancer

  DNSName:
    Description: "The URL of the Web Load Balancer"
    Value: !GetAtt "LoadBalancer.DNSName"

  HostedZoneId:
    Description: "The CanonicalHostedZoneNameID of the Web Load Balancer"
    Value: !GetAtt "LoadBalancer.CanonicalHostedZoneID"

  TargetGroup1:
    Description: The created TargetGroup 1
    Value: !Ref Test1TargetGroup

  TargetGroup2:
    Description: The created TargetGroup 2
    Value: !Ref Test2TargetGroup