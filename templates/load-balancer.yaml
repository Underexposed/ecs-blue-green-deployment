Description: >
  Create Application Load Balancer resources for Blue/Green Deployment on ECS. For further reference, please review BluegreenRepo ==> https://github.com/awslabs/ecs-blue-green-deployment

Parameters:
  VpcId:
    Type: String

  VpcCIDR:
    Type: String

  Subnet1:
    Type: AWS::EC2::Subnet::Id

  Subnet2:
    Type: AWS::EC2::Subnet::Id

  Name:
    Type: String

Resources:
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-alb
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 80
          ToPort: 80
        # Change below CidrIp to !Ref VpcCIDR, if you want to restrict the beta version of the traffic to VPC CIDRs only
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 8080
          ToPort: 8080
      VpcId: !Ref VpcId

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref Name
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref SecurityGroup
      Scheme: "internet-facing"

  # We define a default target group here, as this is a mandatory Parameters
  # when creating an Application Load Balancer Listener. This is not used, instead
  # a target group is created per-service in each service template (../services/*)
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      #Name: !Sub ${EnvironmentName}-default
      Name: "dev-default"
      VpcId: !Ref VpcId
      Port: 80

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  ListenerCertificate:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Properties: 
      Certificates: 
      #  - CertificateArn: !Ref CertificateArn
        - CertificateArn: arn:aws:acm:eu-west-1:738308653220:certificate/4a2de45a-2c6b-4dfd-95b0-cea3bdc26ad8
      ListenerArn: !Ref Listener
      Protocol: HTTP   









      # This Is Old YAML For V1 Load Balancers - Jesus Christ... So Much Time Wasted...
      # Listeners:
      #   - InstancePort: '80'
      #     InstanceProtocol: "HTTP"
      #     LoadBalancerPort: '80'
      #     Protocol: "HTTP"
        # - LoadBalancerPort: '443'
        #   Protocol: "HTTPS"
        #   InstancePort: '80'
        #   InstanceProtocol: "HTTP"
        #   SSLCertificateId: !Ref "CertificateArn"
      #     PolicyNames:
      #       #- !Sub "${PMServerEnv}-SSLNegotiationPolicy"
      #       - "dev-SSLNegotiationPolicy"
      # # List aws elb describe-load-balancer-policies
      # Policies:
      #   #- PolicyName: !Sub "${PMServerEnv}-SSLNegotiationPolicy"
      #   - PolicyName: "dev-SSLNegotiationPolicy"
      #     PolicyType: "SSLNegotiationPolicyType"
      #     Attributes:
      #     - Name: "Server-Defined-Cipher-Order"
      #       Value: 'true'
      #     - Name: "Protocol-TLSv1"
      #       Value: 'false'
      #     - Name: "Protocol-TLSv1.1"
      #       Value: 'false'
      #     - Name: "Protocol-TLSv1.2"
      #       Value: 'true'
      #     - Name: "Protocol-SSLv3"
      #       Value: 'false'
      #     - Name: "ECDHE-ECDSA-AES128-GCM-SHA256"
      #       Value: 'true'
      #     - Name: "ECDHE-ECDSA-AES128-GCM-SHA256"
      #       Value: 'true'
      #     - Name: "ECDHE-ECDSA-AES128-SHA256"
      #       Value: 'true'
      #     - Name: "ECDHE-RSA-AES128-SHA256"
      #       Value: 'true'
      #     - Name: "ECDHE-ECDSA-AES256-GCM-SHA384"
      #       Value: 'true'
      #     - Name: "ECDHE-RSA-AES256-GCM-SHA384"
      #       Value: 'true'
      #     - Name: "ECDHE-ECDSA-AES256-SHA384"
      #       Value: 'true'
      #     - Name: "ECDHE-RSA-AES256-SHA384"
      #       Value: 'true'
      #     - Name: "AES128-GCM-SHA256"
      #       Value: 'true'
      #     - Name: "AES128-SHA256"
      #       Value: 'true'
      #     - Name: "AES256-GCM-SHA384"
      #       Value: 'true'
      #     - Name: "AES256-SHA256"
      #       Value: 'true'
      # 

  # Listener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     LoadBalancerArn: !Ref LoadBalancer
  #     Port: 80
  #     Protocol: HTTP
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref DefaultTargetGroup

        
  # ListenerCertificate:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
  #   Properties: 
  #     Certificates: 
  #       - Certificate
  #     ListenerArn: String

  # # We define a default target group here, as this is a mandatory Parameters
  # # when creating an Application Load Balancer Listener. This is not used, instead
  # # a target group is created per-service in each service template (../services/*)
  # DefaultTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     #Name: !Sub ${EnvironmentName}-default
  #     Name: "dev-default"
  #     VpcId: !Ref VpcId
  #     Port: 80
  #     Protocol: HTTP   

  # Listener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     LoadBalancerArn: !Ref LoadBalancer
  #     Port: 443
  #     Protocol: HTTPS
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref TargetGroup

  # ListenerRule:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties:
  #     Actions:
  #       - Type: forward
  #         TargetGroupArn: !Ref TargetGroup
  #     Conditions:
  #       - Field: path-pattern
  #         Values:
  #         - "*"
  #     ListenerArn: !Ref LoadBalancerListener
  #     Priority: 1
        
Outputs:
  ServiceUrl:
    Description: URL of the load balancer for the sample service.
    Value: !Sub http://${LoadBalancer.DNSName}

  SecurityGroup:
    Value: !Ref SecurityGroup

  LoadBalancerArn:
    Value: !Ref LoadBalancer

  DNSName:
    Description: "The URL of the Web Load Balancer"
    Value: !GetAtt "LoadBalancer.DNSName"

  HostedZoneId:
    Description: "The CanonicalHostedZoneNameID of the Web Load Balancer"
    Value: !GetAtt "LoadBalancer.CanonicalHostedZoneID"